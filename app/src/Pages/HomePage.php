<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use Symbiote\GridFieldExtensions\GridFieldEditableColumns;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class HomePage extends Page
    {
        private static $icon_class = 'font-icon-home';

        private static $db = [];

        private static $has_one = [];

        private static $has_many = [
            'SliderContents' => SliderContent::class,
            'SliderButtons'  => SliderButton::class,
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub

            $gridConfig = GridFieldConfig_RecordEditor::create(9999);
            if ($this->SliderContents()->Count()) {
                $gridConfig->addComponent(new GridFieldSortableRows('Sort'));
            }
            $gridConfig->addComponent(new GridFieldEditableColumns());
            $gridColumns = $gridConfig->getComponentByType(GridFieldEditableColumns::class);
            $gridColumns->setDisplayFields([
                'Archived' => [
                    'title' => 'Archive',
                    'callback' => function($record, $column, $grid) {
                        return CheckboxField::create($column);
                    }
                ]
            ]);

            $gridField = GridField::create(
                'SliderContents',
                'Slider Content',
                $this->SliderContents(),
                $gridConfig
            );

            $fields->addFieldToTab('Root.Main', $gridField, 'Metadata');

            $gridConfigNav = GridFieldConfig_RecordEditor::create(9999);
            if ($this->SliderButtons()->Count()) {
                $gridConfigNav->addComponent(new GridFieldSortableRows('Sort'));
            }
            $gridConfigNav->addComponent(new GridFieldEditableColumns());
            $gridColumnsNav = $gridConfigNav->getComponentByType(GridFieldEditableColumns::class);
            $gridColumnsNav->setDisplayFields([
                'Archived' => [
                    'title' => 'Archive',
                    'callback' => function($record, $column, $grid) {
                        return CheckboxField::create($column);
                    }
                ]
            ]);

            $gridFieldNav = GridField::create(
                'SliderButtons',
                'Slider Button',
                $this->SliderButtons(),
                $gridConfigNav
            );

            $fields->addFieldToTab('Root.SliderNavigation', $gridFieldNav);
            return $fields;
        }

        public function getVisibleSliderContents()
        {
            return $this->SliderContents()->filter('Archived', false)->sort('Sort');
        }

        public function getVisibleSliderButtons()
        {
            return $this->SliderButtons()->filter('Archived', false)->sort('Sort');
        }
    }
}
