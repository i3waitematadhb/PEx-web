<?php

namespace {

    use SilverStripe\Forms\CheckboxField;
    use SilverStripe\Forms\GridField\GridField;
    use SilverStripe\Forms\GridField\GridFieldConfig_RecordEditor;
    use SilverStripe\Forms\HiddenField;
    use SilverStripe\Forms\HTMLEditor\HTMLEditorField;
    use SilverStripe\Forms\ReadonlyField;
    use SilverStripe\Forms\TextField;
    use SilverStripe\ORM\DataObject;
    use Symbiote\GridFieldExtensions\GridFieldEditableColumns;
    use UndefinedOffset\SortableGridField\Forms\GridFieldSortableRows;

    class SliderContent extends DataObject
    {
        private static $default_sort = 'Sort';

        private static $singular_name = "Slider Content";
        private static $plural_name = "Slider Contents";

        private static $db = [
            'Name' => 'Varchar',
            'Content' => 'HTMLText',
            'Archived' => 'Boolean',
            'Sort' => 'Int'
        ];

        private static $has_one = [
            'CardiologyPage' => CardiologyPage::class
        ];

        private static $has_many = [
            'VideoTabs' => VideoTab::class
        ];

        private static $summary_fields = [
            'Name',
            'Status'
        ];

        public function getCMSFields()
        {
            $fields = parent::getCMSFields(); // TODO: Change the autogenerated stub
            $fields->removeByName('CardiologyPageID');
            $fields->addFieldToTab('Root.Main', ReadonlyField::create('CardiologyPageRO', 'Page', $this->CardiologyPage()->Title));
            $fields->addFieldToTab('Root.Main', TextField::create('Name'));
            $fields->addFieldToTab('Root.Main', HTMLEditorField::create('Content'));

            $gridConfig = GridFieldConfig_RecordEditor::create(9999);
            if ($this->VideoTabs()->Count()) {
                $gridConfig->addComponent(new GridFieldSortableRows('Sort'));
            }
            $gridConfig->addComponent(new GridFieldEditableColumns());
            $gridColumns = $gridConfig->getComponentByType(GridFieldEditableColumns::class);
            $gridColumns->setDisplayFields([
                'Archived' => [
                    'title' => 'Archive',
                    'callback' => function ($record, $column, $grid) {
                        return CheckboxField::create($column);
                    }
                ]
            ]);

            $gridField = GridField::create(
                'VideoTabs',
                'Video Tab',
                $this->VideoTabs(),
                $gridConfig
            );

            $fields->addFieldToTab('Root.VideoTabs', $gridField);
            $fields->addFieldToTab('Root.Main', CheckboxField::create('Archived'));
            $fields->addFieldToTab('Root.Main', HiddenField::create('Sort'));

            return $fields;
        }

        public function getVisibleVideoTabs()
        {
            return $this->VideoTabs()->filter('Archived', false);
        }

        public function getStatus()
        {
            if($this->Archived == 1) return _t('GridField.Archived', 'Archived');
            return _t('GridField.Live', 'Live');
        }
    }
}
